version: "3.9"

networks:
  backend-net:
    driver: bridge
  frontend-net:
    driver: bridge

services:
  # Postgres for all services
  postgres:
    image: postgres:16
    #    container_name: postgres_cloud
    environment:
      POSTGRES_USER: master
      POSTGRES_PASSWORD: masterpwd
    #    ports:
    #      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d   # âœ… auto-init
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U master" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-net

  redis:
    image: redis:7
    networks:
        - backend-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 10
    # no port mapping -> internal only


  # Eureka server
  service-registry:
    build: ./service-registry
    #    container_name: service-registry
    environment:
      - SERVER_PORT=8761
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    ports:
      - "8761:8761"
    networks:
      - backend-net

  # API Gateway
  api-gateway:
    build: ./api-gateway
    #    container_name: api-gateway
    depends_on:
      - service-registry
    environment:
      - SERVER_PORT=8443
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - JWT_SECRET=${JWT_SECRET}
      - SSL_KEYSTORE_PASSWORD=${SSL_KEYSTORE_PASSWORD:-changeit}
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
      - SECURITY_API-KEY_ENABLED=true
      - SECURITY_API-KEY_ALLOWED-KEYS=${API_KEYS:-demo-key-1,demo-key-2}
    ports:
      - "8443:8443"
    networks:
      - backend-net
      - frontend-net

  # RabbitMQ for messaging
  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # Management UI http://localhost:15672  (guest/guest)
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - backend-net


  # User Service
  user-service:
    build: ./user-service
    #    container_name: user-service
    depends_on:
      - postgres
      - service-registry
    environment:
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/users_db
      - SPRING_DATASOURCE_USERNAME=users_owner
      - SPRING_DATASOURCE_PASSWORD=${USERS_DB_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8081"
    networks:
      - backend-net

  # Match Service
  match-service:
    build: ./match-service
    #    container_name: match-service
    depends_on:
      - postgres
      - service-registry
    environment:
      - SERVER_PORT=8082
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/matches_db
      - SPRING_DATASOURCE_USERNAME=matches_owner
      - SPRING_DATASOURCE_PASSWORD=${MATCHES_DB_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8082"
    networks:
      - backend-net

  # Ticket Service
  ticket-service:
    build: ./ticket-service
    #    container_name: ticket-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_started
    environment:
      - SERVER_PORT=8083
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/tickets_db
      - SPRING_DATASOURCE_USERNAME=tickets_owner
      - SPRING_DATASOURCE_PASSWORD=${TICKETS_DB_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8083"
    networks:
      - backend-net

  # Notification Service
  notification-service:
    build: ./notification-service
    #    container_name: notification-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_started
    environment:
      - SERVER_PORT=8084
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/notifications_db
      - SPRING_DATASOURCE_USERNAME=notifs_owner
      - SPRING_DATASOURCE_PASSWORD=${NOTIFS_DB_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8084"
    networks:
      - backend-net

    # Frontend
  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    ports:
      - "3000:80"   # host:container
    depends_on:
      - api-gateway
    networks:
      - frontend-net

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    networks:
      - backend-net



volumes:
  postgres_data:
